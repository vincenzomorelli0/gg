<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns="http://splitcells.net/sew.xsd"
         xmlns:d="http://splitcells.net/den.xsd">
    <meta>
        <!--
            SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
            SPDX-FileCopyrightText: Contributors To The `net.splitcells.*` Projects
        -->
        <title>Project Life Cycle Guidelines</title>
    </meta>
    <chapter>
        <title>Life Cycle</title>
        <paragraph>It should be known, why a project is created and under which conditions it will be dismantled.
        </paragraph>
    </chapter>
    <chapter>
        <title>Version Control</title>
        <paragraph>The commit log is a program, that describes the development of the project.
            The
            <link>
                <text>semantic versioning</text>
                <url>https://semver.org/</url>
            </link>
            is used as a default versioning format.
        </paragraph>
    </chapter>
    <chapter>
        <title>Development Process</title>
        <chapter>
            <title>Migration Based Development Process</title>
            <paragraph>
                Prioritize a buildable and working project state at every point in the development.
                Prefer test driven development.
                Ensure that the project is build, tested and executed in different environments,
                in order to ensure, that the projects works.
            </paragraph>
            <paragraph>Prefer that
                <link>
                    <text>backwards compatibility</text>
                    <post>/net/splitcells/network/guidelines/backwards-compatibility</post>
                </link>
                is provided as good as planned.
            </paragraph>
        </chapter>
        <paragraph>
            Do not assume that better skills, more intelligence, working harder, etc. automatically lead to a
            better result.
        </paragraph>
        <paragraph>Prefer every part of the development process having a task or goal.</paragraph>
    </chapter>
    <chapter>
        <title>Project Partitioning</title>
        <image xl:href="project.partitioning.svg"/>
        <paragraph>If projects become big or mature enough,
            it should be considered to partition these into parts dedicated to certain overhaul aspects of the projects in relation to their environment.
            If projects are not big enough to be split up,
            it may help to consider every folder with source code as its own mini sub project.
        </paragraph>
        <paragraph>One way of doing this, is to partition the project into layers,
            where the deepest parts ensure,
            that the core idea of the project works.
            Partitions on the outer layers are more and more concerned with the environment like dependencies:</paragraph>
        <list>
            <item>Core: the core contains the minimal implementation to get the project running.</item>
            <item>Merger: the merger establishes a common vocabulary and interface, for the core features of the project.
                It has the authority to define and verify every core feature of the project.</item>
            <item>Sheath: the sheath contains alternative implementations, plugins, extensions, etc.
                These are often used with project or are explicitly supported.
                It is often used to add external dependencies to the project, without polluting the core.</item>
            <item>Environment (Env): the environment is an dependency, software, alternative implementation or plugin,
                that is not explicitly supported.
                Such things may be absolute necessary to run the software, which is the case for operation systems,
                but they may also be perfectly integrated plugins, that were not published yet.</item>
        </list>
        <paragraph>This is a nice metaphor, but is very uncommon in the public, so the following partitioning makes more sense in practice
            and should be used instead:</paragraph>
        <list>
            <item>Core: the core contains the minimal implementation to get the project running.</item>
            <item>API: establishes a common vocabulary and interface, for the core features of the project.
                It has the authority to define and verify every core feature of the project and
                therefore may contain the testsuite of the project.</item>
            <item>Extension (Ext): Contains alternative implementations, plugins, extensions, etc. for the project.</item>
            <item>Documentation (Doc): The doc contains documentation, media files and such and may be especially useful for user manuals and similar.</item>
        </list>
    </chapter>
</article>