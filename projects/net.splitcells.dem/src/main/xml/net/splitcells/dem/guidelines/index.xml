<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xl="http://www.w3.org/1999/xlink" xmlns:x="http://www.w3.org/1999/xhtml"
         xmlns="http://splitcells.net/sew.xsd"
         xmlns:d="http://splitcells.net/den.xsd" xmlns:p="http://splitcells.net/private.xsd"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xsi:schemaLocation="http://splitcells.net/sew.xsd sew.xsd">
    <meta>
        <title>
            <siteName/>
            's Experimental Code Guidelines
        </title>
        <description>
            I created these code guidelines in order to do some thought
            experiments.
            Do not consider
            these code
            guide lines for
            your own
            code.
            <link>
                <text>If you do, people will hate you, and you’ll be scorned by
                    friends and family.
                </text>
                <url>https://git-scm.com/book/en/v1/Git-Branching-Rebasing#The-Perils-of-Rebasing
                </url>
            </link>
        </description>
        <publication_date year="2018" month="04" day_of_month="29"/>
        <license>standard</license>
        <related_to>
            <url>
                <site_instance_purl/>
                /2020/01/06/discovery-based-networks-of-perspectives-and-changes
            </url>
        </related_to>
        <d:toDo>
            <d:toDo>Minimize guideline.</d:toDo>
            <d:toDo>Move framework specific guides to framework documentation or delete it,
                if this is covered by frameworks API.
            </d:toDo>
            <d:toDo>Document dependency lifecycle of injection and integration.</d:toDo>
            <d:todo>
                Meta Code Guidelines
                <d:todo>https://github.com/icy/bash-coding-style</d:todo>
                <d:todo>http://localhost:4000/white/index.html</d:todo>
            </d:todo>
            <d:toDo xl:href="https://en.wikipedia.org/wiki/Dynamic_program_analysis"/>
            <d:todo>
                assertions (error detecting during execution and testing)
                <d:todo>When to use assertions and when not.</d:todo>
                <d:todo>Assert condition on actual objects directly.
                    Do not assert
                    variables representing the
                    presence of a condition,
                    as it makes
                    debugging and error reporting
                    harder.
                    https://blog.smartcoders.xyz/2018/02/14/asserttrue-vs-assertthat-vs-assertj/
                </d:todo>
                <d:todo>Assertions should have access to the underlining objects for
                    better error reporting.
                </d:todo>
            </d:todo>
            <d:todo>consistency checks</d:todo>
            <d:todo>unit test</d:todo>
            <d:todo>integration test</d:todo>
            <d:todo>complete test</d:todo>
            <d:todo>naming conventions: suffixes</d:todo>
            <d:todo>naming conventions: verb, attribute, getter and setter
            </d:todo>
            <d:todo>naming conventions: Ensure state via active verbs as it makes
                short names and allows
                inefficient but simple
                implementations. i.e.
                package.state(INSTALLED) -> package.install (Note that
                the first
                version makes more sense
                in some
                cases. The first one can also be
                implemented as a wrapper
                for the second one.)
            </d:todo>
            <d:todo>up cast convention</d:todo>
            <d:todo>side effect free interfaces</d:todo>
            <d:todo>down cast convention: down casted objects should be not lead
                to interfaces with side
                effects (i.e. parting
                collection interface in
                multiple interfaces representing different access
                rights.).
            </d:todo>
            <d:todo>technical and domain specific interface: inheritance and
                composition rule
            </d:todo>
            <d:todo>Minimize the number of current migration to 1 migration per
                component.
            </d:todo>
            <d:todo>Avoid assertThat((boolean) ...)... in AssertJ as one may
                forget to write isTrue().
            </d:todo>
            <d:todo>Multi thread/process programming should not be about
                thread/process but about removing
                instruction
                dependencies.
            </d:todo>
            <d:todo>
                Every persistent task is part of a software project or a software
                project itself and should
                be
                contained inside a
                folder.
                <d:todo>A software project is metadata like the .git files of Git
                    repositories.
                    Another example are
                    the .idea folders of
                    Intellji IDE
                    projects.
                </d:todo>
                <d:todo>
                    If multiple software projects are added to the task folder,
                    it is
                    preferred to add software
                    projects to the task
                    folder. Wrapping the
                    task
                    folder
                    with software projects recursively does not
                    scale.
                    <d:todo>If possible one could create a software project folder
                        inside the folder
                        where all
                        software project files are
                        put. Make sure
                        to
                        make the folder name unique
                        i.e. ".meta.238" .
                    </d:todo>
                </d:todo>
            </d:todo>
            <d:todo>Make all assumtions visible (i.e. nullable variables via
                Optional).
            </d:todo>
            <d:todo>https://devhints.io/</d:todo>
            <d:todo>
                https://www.jwz.org/doc/worse-is-better.html
                <d:todo>Make consistent by making more simple things the consistent
                    ones.
                </d:todo>
                <d:todo>Make correct by making more simple things the correct ones.
                </d:todo>
            </d:todo>
            <d:toDo>Avoid software rewrites and prefer migration based development.</d:toDo>
            <d:toDo>Projects are likely to grow and get out of scope.</d:toDo>
            <d:toDo>Fork, join and cathedral development protocol.</d:toDo>
            <d:toDo>Programs should be primarily seen as tree/table transformers in order
                to simplify programming paradigm and language use.
            </d:toDo>
            <d:toDo>Migration based Development</d:toDo>
            <d:toDo>Configuration automation guidelines.</d:toDo>
            <d:toDo>Make it possible to tolerate out of date documentation.</d:toDo>
        </d:toDo>
    </meta>
    <chapter>
        <title>Goals
        </title>
        <paragraph>These are my experimental code guidelines.
            These may
            not comply to common best
            practices and might be
            even harmful.
            They
            only
            represent the current state of some personal thought
            experiments.
        </paragraph>
        <paragraph>
            Do not consider these code guidelines for your own code.
            <link>
                <text>If you do, people will hate you, and you’ll be scorned by
                    friends and family.
                </text>
                <url>https://git-scm.com/book/en/v1/Git-Branching-Rebasing#The-Perils-of-Rebasing
                </url>
            </link>
        </paragraph>
        <paragraph>Guide lines are just that. They are nothing more and nothing less, but if these guidelines are
            not applied a reason should be present.
            These guide lines main goal is to set priorities and paradigms.
            The details should be handled by project or language specific guide lines.
        </paragraph>
    </chapter>
    <chapter>
        <title>Alternative Guidelines</title>
        <paragraph>For (programming) languages or parts of it without explicit guidelines, please use
            other public guidelines, as long it does not conflict with already
            implemented guides. Most accepted public guidelines are preferred.
        </paragraph>
    </chapter>
    <chapter>
        <title>Base Rule</title>
        <paragraph>The project structure, its contents and products has to represent a
            discovery based network of perspectives and changes.
            The project and its parts should be portable, extendable, adaptable,
            <link>
                <text>deletable</text>
                <url>https://programmingisterrible.com/post/139222674273/how-to-write-disposable-code-in-large-systems
                </url>
            </link>
            and comply with
            <link>
                <text>Perspective's guidelines</text>
                <post>/net/splitcells/dem/lang/perspective/index</post>
            </link>
            .
        </paragraph>
    </chapter>
    <chapter>
        <title>Life Cycle</title>
        <paragraph>It should be known, why a project is created and under which conditions it will be dismantled.
        </paragraph>
        <chapter>
            <title>Version Control</title>
            <paragraph>The commit log is a program, that describes the development of the project.
                The
                <link>
                    <text>semantic versioning</text>
                    <url>https://semver.org/</url>
                </link>
                is used as a default versioning format.
            </paragraph>
            <paragraph>Make clear what is guaranteed and do this only via an explicit interface,
                that has no implementation specifics.
                Prefer backward compatible changes to backward incompatible changes.
                Make as much undefined as possible for not essential things in order to minimize the set of guarantees.
                Breaking other software, because it relied on implementation specifics is better,
                than breaking other software via incompatible API changes.
                Do not just break features, but also migrate its usage to other appropriate features before breaking
                said features.
            </paragraph>
        </chapter>
        <chapter>
            <title>Development Process</title>
            <paragraph>Do not assume that better skills, more intelligence, working harder, etc. automatically lead to a
                better result.
                Prioritize a working project state at every point in the development.
                Prefer test driven development.
                Ensure that the project is build, tested and executed in different environments,
                in order to ensure, that the projects works.
            </paragraph>
            <paragraph>Every part of the development process should have a task</paragraph>
        </chapter>
    </chapter>
    <chapter>
        <title>Management</title>
        <chapter>
            <title>Task Organization</title>
            <paragraph>
                Tickets should be stored at the location where these are used or matter.
                It should be easy to figure out which tickets apply to a certain portion of a project.
                If a person is working on a part of the project in question,
                relevant tickets should be available with little work.
            </paragraph>
            <paragraph>Tickets can be stored as a comment at the relevant source code location.
                Every task should start with <quote>TODO</quote>, which is recognized by many tools.
                Additional tags can be used in order to signal, which tasks may be ignored under special conditions
                or may require special care:
            </paragraph>
            <list>
                <item><quote>ACTIVE</quote>: Someone is already working on the marked tag.</item>
                <item><quote>FIXME</quote>: This task points to an error.</item>
                <item><quote>IDEA</quote>: This task may not be a good idea.</item>
                <item><quote>HACK</quote>: This task marks a code quality issue.</item>
            </list>
        </chapter>
    </chapter>
    <chapter>
        <title>Documentation</title>
        <paragraph>Documentation links syntax to semantics or represents meta data.
            A single point of entry should be provided from where every part of the documentation is reachable.
            Multiple points of additional entries may be provided.
            It should be possible to render all documentation as one site, were everything can be easily accessed
            and searched.
        </paragraph>
        <chapter>
            <title>Documentation Types</title>
            <paragraph>Manuals describe the implemented concept and how to use the described things.
                Thereby, all relevant words with special meaning have to be explained.
                This includes all words, that are used in implementation.
                The manual should not describe the API.
                For simplicity this should only consist of flowing structured text and inlines objects (i.e. images).
                In Java this is done via CommonMark files.
            </paragraph>
            <paragraph>API documentation describes all things that can be accessed legally.
                Implementation internals should not be noted here.
                In Java this is done via Javadoc.
            </paragraph>
        </chapter>
        <chapter>
            <title>Documentation Content</title>
            <paragraph>The documentation needs to at least define the goal or the result of the thing in question.
                Everything needs documentation.
                Classic documentation can sometimes be replaced by programs (i.e. build script named <quote>
                    build.service
                </quote> instead of
                describing how to
                build software), but everything needs documentation.
            </paragraph>
            <paragraph>Documentation may also contain inspiration emotional content in the form of quotes
                and haiku and should always relate to the described thing.
                The additional emotional context provides a different perspective
                on the semantics of the documented thing.
                This helps the reader to better understand the project and its usage.
                The amount of such should be minimal.
            </paragraph>
        </chapter>
        <chapter>
            <title>Documentation Complexity Management</title>
            <paragraph>Updating the documentation is always a problem.
                Minimize the amount of documentation.
                In the best case, the name of a thing is its documentation.
                Documenting justifications may also be required in order to omit regressions
                or development things in a circle.
            </paragraph>
            <paragraph>If large documentation like a user manual is required, make it a project of its own.
                Otherwise, documentation and the software development will hinder each other,
                because of the combined complexity.
            </paragraph>
            <paragraph>Every public API component should not only have a name/id but also have at least an naturally
                described
                summary of its functionality in order to merge syntax and semantics.
                This can be omitted if the name/id is also a natural description.
            </paragraph>
        </chapter>
    </chapter>
    <chapter>
        <title>Program Code</title>
        <paragraph>The programming code should prioritize adaptability and readability.
            This can be made by making it easy to refactor the code or to translate it to a completely other language.
            The use of standard/common code conventions also makes it easier to integrate other code easier
            and in a more consistent way.
        </paragraph>
        <paragraph>Avoid side effects, as it makes it harder to understand a program.
            Avoid inheritance, because it makes it harder to write easily portable
            side effect free code under certain conditions.
            Inheritance works great as adhoc wrappers and type and implementation extenders.
            Inheritance does not support swapping out the parent implementation,
            which makes it often not portable in practice.
        </paragraph>
        <paragraph>State intent and not actions. Therefore, pointer or index arithmetic should be avoided.</paragraph>
        <chapter>
            <title>Identifiers</title>
            <paragraph>Readability is preferred over compactness,
                but compactness is still important.
                Every name should have an unambiguous meaning.
            </paragraph>
            <paragraph>This means a renaming
                would be valid, if every instance of the name can be renamed,
                while still maintaining the correct meaning.
                Symbols, whose meaning are already contained in other symbols,
                should be omitted.
                Names are preferred to abbreviation and abbreviation are preferred to symbols as a shorthand.
            </paragraph>
        </chapter>
        <chapter>
            <title>Testing</title>
            <paragraph>It should be possible to execute the tests programmatically inside the program.
                An appropriate main method should be provided, so the tests can be executed as a program.
                This ensures that tests are nothing special and therefore independent of the build system.
            </paragraph>
            <paragraph>Every implemented feature should be tested.
                Also every project command should be tested as well.
            </paragraph>
            <chapter>
                <title>Naming Convention</title>
                <paragraph>
                    Every test name starts with a verb like every other method that's primary function is an action.
                    Every test name should refer to the primarily tested thing (Object/Method/Function/Class),
                    the tested feature, the tested situation and the tested result in that order
                    (This is based on
                    <link>
                        <text>Naming standards for unit tests by Roy Osherove</text>
                        <url>https://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html</url>
                    </link>
                    ).
                    All referred things in the method name, should be referred to, by its original name.
                </paragraph>
                <paragraph>Inside tests following naming scheme can be used: a test subject is creating a test product
                    that is verified or validated in order to create a test result. A test is successful, if the test
                    result is positive.
                </paragraph>
            </chapter>
            <chapter>
                <title>Optionality of Tests</title>
                <paragraph>
                    Tests are generally speaking optional and not part of the
                    main
                    interface contract.
                    In other words no
                    code is allowed to rely on the fact, that it will be informed about
                    errors explicitly or implicitly.
                </paragraph>
                <paragraph>It has to be explicitly stated, if argument checking is
                    part of the interface. These types of checks are
                    not considered to
                    be
                    tests in this context.
                </paragraph>
            </chapter>
            <chapter>
                <title>Self Testing</title>
                <paragraph>Each test should have an error message, in order to
                    minimize the time in order to understand an error.
                </paragraph>
            </chapter>
        </chapter>
        <chapter>
            <title>Formatting</title>
            <paragraph>The code should be formatted in such a way that the
                required space is minimized and
                the readability and navigability of the text is maximized.
                Empty lines are omitted, if indentation is enough to easily separate code
                blocks.
            </paragraph>
            <paragraph>Automatic code styling/formatting should never remove already present new line
                characters, as otherwise it is hard to structure large code statements.
            </paragraph>
            <paragraph>It is preferred that symbols that structure the code are located
                at the most left side instead at the most right side when whitespace is ignored.
                This allows the navigate the code structure easily while minimizing
                the need to look into the meaning of the code.
            </paragraph>
            <paragraph>Prefer tabbing, if automatic source code formatting is preferred and details of the format are
                not important, in order to prefer writing speed.
                Prefer whitespace, if formatting details are important.
            </paragraph>
        </chapter>
        <chapter>
            <title>Dependencies</title>
            <paragraph>
                Maximize the replaceability of external dependencies.
                Minimize dependency on concrete versions of the dependencies.
                Prefer own interfaces and avoid accessing external things. Use dependency injection via static methods
                as this supports
                most paradigms and implementations. This also supports
                dependency injection of general objects like lists nicely.
            </paragraph>
            <paragraph>Minimize the number of extern dependencies that are explicitly supported as these can cause
                a maintenance burden. Minimize side effects between dependencies.
                For example, in an ideal case transitive dependencies are not shared between dependencies.
            </paragraph>
            <paragraph>If there are not enough resources or if it is not optimal to develop
                and maintain a piece of required functionality, then use a dependency in order to get this functionality
                and declare the functionality of the dependency as something that is out of scope of the project.
                The support, usage and extension of the dependency might still be part of the project.
            </paragraph>
            <paragraph>Minimize direct dependencies between different things inside the project
                in order to easier analyse the effect of one piece of code to the rest of the project.
            </paragraph>
        </chapter>
        <chapter>
            <title>Namespace</title>
            <paragraph>Try to create a common dictionary of words. Each word
                should be used for one meaning if possible.
                This makes
                it easier to
                create names for new things, to find new things by its name and to
                understand described things.
            </paragraph>
            <paragraph>Use prefixes if multiple dictionaries have to be used in a
                document.
                This helps to associate each text with
                its correct meaning.
            </paragraph>
            <paragraph>Avoid importing the same things over and over again in
                each file.
                If possible create dictionary documents
                that contain all
                imports and link
                to these dictionaries in each document. Minimize the
                number of dictionary documents
                which
                are linked to from a given
                document.
                Minimize the number of individual imports in non dictionary
                documents.
            </paragraph>
        </chapter>
        <chapter>
            <title>Logging</title>
            <paragraph>By default settings only events that require action or signal execution progress for the
                log inspector should be shown.
            </paragraph>
            <chapter>
                <title>Logging as Event Log</title>
                <paragraph>Model the (interactive) console and log files as event
                    logs/queues.
                    The
                    subject/publisher of the event
                    should
                    always be
                    directly
                    or indirectly identifiable.
                    This way it is
                    ensured that the
                    history of
                    the execution is shown, which
                    allows one understand the
                    execution
                    and
                    interact with it. In the ideal case one can reproduce the
                    history of
                    each object.
                </paragraph>
            </chapter>
        </chapter>
    </chapter>
    <chapter>
        <title>Complexity Management</title>
        <d:toDo>Remove coding details.</d:toDo>
        <paragraph>Prefer using existing standards instead of a new one.
            If a standard does not fulfill ones need, one can use a restricted version of the standard:
            only a part of the standard is used, which in turn allows one to add new functionality to the standard.
        </paragraph>
        <paragraph>
            The complexity of project should be planned.
            If the
            project's complexity becomes greater than planned, it
            may be a
            indicator that the project needs to be
            simplified.
            This can be done by
            splitting the project into multiple
            ones.
        </paragraph>
        <paragraph>Minimize the amount of complexity.
            Minimize the set of required programming language features.
            The set of actually used programming features is not important.
        </paragraph>
        <paragraph>General code is easier to manage than domain specific functions
            as domain specific functions tend to grow in complexity over time.
            It is easier to limit the maximum complexity of general code, because its easier
            to exactly define the content of such a function.
            , that it relies on predefined interfaces, which may
            The downside of general code is, that it may provide more functionality
            than currently needed, which may require more code than strictly needed.
            This can be omitted by not implementing not used parts of the general code.
            There are 2 ways to do this: one can call a function with some arguments set to null,
            which are not valid, but are not used by the function because
            the other arguments are have certain values.
            Another way is to explicitly throw an exception, if a not implemented part is
            used. In this case it is best to create a dedicated exception class for this in order
            unambiguous mark unfinished code parts.
            Both methods create an exception, if an unfinished part of a code is executed.
        </paragraph>
        <chapter>
            <title>Complex Projects</title>
            <paragraph>Complex projects consist of multiple projects called sub.
                A complex project is represented by a project called root.
                A sub project should be classifiable as on of 4 types: core, merger, sheath and environment.
                An merger project contains interfaces and abstract factories,
                An core project provides interface implementations and provide factories, that are used by the abstract
                factories of the merger project via dependency injection.
                Sheath code are explicit external dependencies of the project.
                Environment code are implicit dependencies of the root project
            </paragraph>
        </chapter>
    </chapter>
    <chapter>
        <title>Dependency Management</title>
        <paragraph>Every folder containing source files should be regarded as its own project.</paragraph>
        <d:toDo>Define core, merger, core.merger, sheath and environment concept.</d:toDo>
        <paragraph>
            Prefer deterministic builds strongly.
            Update dependencies explicitly and not implicitly.
            Thereby one has control over the update time,
            quality
            and repeatability.
            If possible create a command in order to automatically
            update dependencies.
        </paragraph>
        <chapter>
            <title>External Dependency</title>
            <paragraph>
                Dependencies on external implementations has to be indirect/abstract.
                Dependencies on external interfaces are allowed but discouraged.
            </paragraph>
        </chapter>
    </chapter>
    <chapter>
        <title>Build Infrastructure</title>
        <paragraph>If there are multiple projects, create a builder project.
            Its objective is to build all other projects.
            Its purpose is to enforce a set of standard project formats, which all projects need to adhere.
            Thereby, the size build scripts in other projects is reduced.
            This leads to a situation, where for simple project formats
            the project format only needs to be declared.
        </paragraph>
        <paragraph>All possible build and related tasks should be documented.
            One way is it to provide a command with no arguments for each task.
        </paragraph>
        <paragraph>Builds should be regularly be done via all build systems
            used, in order to ensure that the code complies
            with each build
            system.
        </paragraph>
    </chapter>
</article>